https://www.geeksforgeeks.org/problems/introduction-to-dp/1

Geek is learning data structures, and he recently learned about the top-down and bottom-up 
dynamic programming approaches. Geek is having trouble telling them apart from one another.
When given an integer n, where n is based on a 0-based index, find the nth Fibonacci number.
Every ith number in the series equals the sum of the (i-1)th and (i-2)th numbers, where the first
and second numbers are specified as 0 and 1, respectively.

Ex: Input:
n = 5
Output: 5
Explanation: 0,1,1,2,3,5 as we can see 5th number is 5.

#JAVA Soln--

class Solution {
    private static final int MOD = 1000000007;//Prevent Integer Overflow
    static long topDown(int n) {
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        return f(n,dp);
    }
    static int f(int n, int[] dp){
    if(n<=1) return n;
    
    if(dp[n]!= -1) return dp[n];
    return dp[n]= (f(n-1,dp) + f(n-2,dp))% MOD;
    }
    static long bottomUp(int n) {
        if(n<=1) return n;
        long[] dp = new long[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2])% MOD;
        }
        return dp[n];
    }}
