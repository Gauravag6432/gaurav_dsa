https://www.geeksforgeeks.org/problems/bfs-traversal-of-graph/1

Given a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.
Note:One can move from node u to node v only if there's an edge from u to v.
Find the BFS traversal of the graph starting from the 0th vertex, from left to right according to the input graph. 
Also, you should only take nodes directly or indirectly connected from Node 0 in consideration.

Example--
Input:
V = 5, E = 4
adj = {{1,2,3},{},{4},{},{}}
Output: 0 1 2 3 4

#JAVA Soln

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        boolean[] visited = new boolean[V]; // To keep track of visited nodes
        visited[0] = true; // Mark the starting node as visited
        
        ArrayList<Integer> bfs = new ArrayList<>();
        
        while (!q.isEmpty()) {
            Integer node = q.poll();
            bfs.add(node);
            
            for (Integer j : adj.get(node)) {
                if (!visited[j]) { // Check if the node is not visited
                    q.add(j);
                    visited[j] = true; // Mark the node as visited
                }}}
        return bfs;
    }}


# CHATGPT code for better understanding--

import java.util.*;
public class Graph {
    private int vertices; // Number of vertices
    private LinkedList<Integer>[] adjList; // Adjacency list
    
    // Constructor to initialize graph
    public Graph(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjList[i] = new LinkedList<>();
        }
    }

    // Add edge to the graph
    public void addEdge(int source, int destination) {
        adjList[source].add(destination);
    }


// BFS algorithm   
    public void bfs(int startVertex) {
        boolean[] visited = new boolean[vertices]; // To keep track of visited nodes
        Queue<Integer> queue = new LinkedList<>();

        // Start with the given starting node
        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            System.out.print(vertex + " ");

            // Get all adjacent vertices of the dequeued vertex
            for (int adjVertex : adjList[vertex]) {
                if (!visited[adjVertex]) {
                    visited[adjVertex] = true;
                    queue.add(adjVertex);
                }
            }
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph(6);
        
        // Add edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);

        // Perform BFS starting from vertex 0
        System.out.println("BFS starting from vertex 0:");
        graph.bfs(0);
    }
}
