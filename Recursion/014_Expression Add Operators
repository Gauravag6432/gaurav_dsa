Given a string num that contains only digits and an integer target, 
return all possibilities to insert the binary operators '+', '-', and/or '*' between
the digits of num so that the resultant expression evaluates to the target value.
Note that operands in the returned expressions should not contain leading zeros.

 https://leetcode.com/problems/expression-add-operators/description/

Example 1:
Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.

Example 2:
Input: num = "232", target = 8
Output: ["2*3+2","2+3*2"]
Explanation: Both "2*3+2" and "2+3*2" evaluate to 8.

#soln

class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> result = new ArrayList<>();
        if (num == null || num.isEmpty()) {
            return result;
        }
        backtrack(result, "", num, target, 0, 0, 0);
        return result;
    }
private static void backtrack(List<String> result, String expression, String num, int target, int index, long currentValue, long lastValue) {
        if (index == num.length()) {
            if (currentValue == target) {
                result.add(expression);
            }
            return;
        }

        // Iterate through the substring starting from the current index
        for (int i = index; i < num.length(); i++) {
            // Extract the current number from the substring
            String part = num.substring(index, i + 1);
            
            // Skip numbers with leading zeros
            if (part.length() > 1 && part.charAt(0) == '0') {
                break;
            }

            long currentNum = Long.parseLong(part);

            if (index == 0) {
                // For the very first number, just use it as the initial value
                backtrack(result, part, num, target, i + 1, currentNum, currentNum);
            } else {
                // Recursively try addition
                backtrack(result, expression + "+" + part, num, target, i + 1, currentValue + currentNum, currentNum);
                // Recursively try subtraction
                backtrack(result, expression + "-" + part, num, target, i + 1, currentValue - currentNum, -currentNum);
                // Recursively try multiplication
                backtrack(result, expression + "*" + part, num, target, i + 1, currentValue - lastValue + (lastValue * currentNum), lastValue * currentNum);
            }
        }
    }
}
