Given an array arr of size n of non-negative integers and an integer sum, 
the task is to count all subsets of the given array with a sum equal to a given sum.
Note: Answer can be very large, so, output answer modulo 109+7.

Link:https://www.geeksforgeeks.org/problems/perfect-sum-problem5633/1

Examples:
Input: n = 6, arr = [5, 2, 3, 10, 6, 8], sum = 10
Output: 3
Explanation: {5, 2, 3}, {2, 8}, {10} are possible subsets.

Input:  n = 5, arr = [2, 5, 1, 4, 3], sum = 10
Output: 3
Explanation: {2, 1, 4, 3}, {5, 1, 4}, {2, 5, 3} are possible subsets.

#soln

class Solution{
private static final int MOD = 1000000007;
	public int perfectSum(int arr[],int n, int sum) 
	{ 
	    int[][] dp = new int[n + 1][sum + 1];
        
        // Initialize the dp array
        dp[0][0] = 1;  // There's one way to make sum 0 with 0 elements
        
        // Fill the dp table
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                // Exclude the current element
                dp[i][j] = dp[i - 1][j];
                
                // Include the current element if possible
                if (j >= arr[i - 1]) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - arr[i - 1]]) % MOD;
                }
            }
        }
        return dp[n][sum];
	} 
}
