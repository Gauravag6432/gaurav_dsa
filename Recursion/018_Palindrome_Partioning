https://leetcode.com/problems/palindrome-partitioning/

You are given a string s, partition it in such a way that every substring is a palindrome.
Return all such palindromic partitions of s. A palindrome string is a string that reads the same backward as forward.
Example:
Input: s = “aab”
Output: [ ["a","a","b"], ["aa","b"] ]	
Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.

#java soln-

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList();
        List<String> temp = new ArrayList();
        int n = s.length();
        Partition(0,n,s,temp,ans);
        return ans;
    }
    public void Partition(int ind, int n, String s, List<String> temp, List<List<String>> ans){
        if(ind==n) {
            ans.add(new ArrayList(temp));
            return;
        }
        for(int i=ind; i<n; i++){
            if(Palindrome(ind,i,s)){
                temp.add(s.substring(ind,i+1));
                Partition(i+1,n,s,temp,ans);
                temp.remove(temp.size()-1);
            }
        }
    }
    public boolean Palindrome(int a,int b,String s){
        while(a<=b){
            if(s.charAt(a++)!=s.charAt(b--)) return false;
        }
        return true;
    }
}
