https://leetcode.com/problems/subsets-ii/

Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

# JAVA Soln--

1. Brute(my soln)--

class Solution {
    void subset(int i,int n,HashSet<List<Integer>> ans,List<Integer> temp,int[] nums){
        if(i==n){
            ans.add(new ArrayList<>(temp));
            return;
        }
        subset(i+1,n,ans,temp,nums);
        temp.add(nums[i]);
        subset(i+1,n,ans,temp,nums);
        temp.remove(temp.size() - 1);
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        int n= nums.length;
        HashSet<List<Integer>> ans = new HashSet<>();
        List<Integer> temp= new ArrayList<>();
        subset(0,n,ans,temp,nums);
        List<List<Integer>> ans2 = new ArrayList<>(ans);
        return ans2;
}}

2.


3. Using DP--
public class Solution {
    public static boolean isSubsetPresent(int n, int K,int []A) {
            boolean[] dp = new boolean[K + 1];
        // Base case: sum of 0 is always possible with an empty subset
        dp[0] = true;
        // Process each element in the array
        for (int num : A) {
            // Update the dp array in reverse to avoid using the same element multiple times
            for (int j = K; j >= num; j--) {
                dp[j] = dp[j] || dp[j - num];
            }
        }
        // Return whether the subset sum K is possible
        return dp[K];
    }
}
