Link: https://leetcode.com/problems/combination-sum-iii/description/

Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
Only numbers 1 through 9 are used. 
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice,
and the combinations may be returned in any order.

Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.

Example 2:
Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.

#JAVA soln 1 (using while loop)

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        function(1,k,n,ans,temp);
        return ans;
    }
    void function(int i, int k, int n, List<List<Integer>>ans, List<Integer> temp){
        if(temp.size()==k){
            if (n==0) ans.add(new ArrayList<Integer>(temp));
            return;
        }
        while(i<=9){
            if(n < i) return;
            temp.add(i);
            function(i+1,k,n-i,ans,temp);
            temp.remove(temp.size() - 1);
            i++;
        }
    }
    
}
# soln 2 (using for loop)

class Solution {
    public void cs(int ind, int k, int n,List<Integer> temp, List<List<Integer>> ans){
        if(temp.size()==k){
            if(n==0) ans.add(new ArrayList(temp));
            return;
        }
        for(int i=ind; i<= 9; i++){
            temp.add(i);
            cs(i+1,k,n-i,temp,ans);
            temp.remove(temp.size()-1);
        }
    }
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans = new ArrayList();
        cs(1,k,n,new ArrayList(),ans);
        return ans;
    }
}
