Link: https://leetcode.com/problems/combination-sum-iii/description/

Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
Only numbers 1 through 9 are used. 
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice,
and the combinations may be returned in any order.

Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.

Example 2:
Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.

#JAVA soln 1

class Solution {
    void function(int i,int var, int k, int n, List<List<Integer>>ans, List<Integer> temp){
        if(temp.size()==k){
            if (n==var) ans.add(new ArrayList<Integer>(temp));
            return;
        }
        while(i<=9){
            var+=i;
            if(var > n) return;
            temp.add(i);
            i+=1;
            function(i,var,k,n,ans,temp);
            int j= temp.size();
            var=var-temp.get(j-1);
            temp.remove(j - 1);
        }
    }
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans = new ArrayList<>();
        int i=1,var=0;
        List<Integer> temp = new ArrayList<>();
        function(i,var,k,n,ans,temp);
        return ans;
    }
}

# soln 2

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), k, n, 1);
        return result;
    }
    private static void backtrack(List<List<Integer>> result, List<Integer> tempList, int k, int n, int start) {
        // If the combination is of the desired length and the sum is equal to n, add it to the result
        if (tempList.size() == k && n == 0) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        // If the combination is invalid, return
        if (tempList.size() > k || n < 0) {
            return;
        }
        // Explore further combinations
        for (int i = start; i <= 9; i++) {
            tempList.add(i);
            backtrack(result, tempList, k, n - i, i + 1); // Move to the next number
            tempList.remove(tempList.size() - 1); // Backtrack
        }
    }
}
