https://leetcode.com/problems/combination-sum/description/

Given an array of distinct integers and a target, you have to return the list of all unique combinations
where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from the given array an unlimited number of times.
Two combinations are unique if the frequency of at least one of the chosen numbers is different.

Example:
Input: array = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]

#Java soln-

class Solution {
    public void cs(int[] cand, int tar, int ind, int n, List<Integer> temp, List<List<Integer>> ans){
        if(ind == n || tar<= 0){ //base case
            if(tar == 0) ans.add(new ArrayList<>(temp));
            return;
        }
        cs(cand, tar, ind+1, n, temp, ans); // not pick the element

        temp.add(cand[ind]);
        cs(cand, tar-cand[ind], ind, n, temp, ans); //pick the element
        temp.remove(temp.size()-1);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        int n= candidates.length;
        cs(candidates, target, 0, n, new ArrayList<>(), ans);
        return ans;
    }
}
