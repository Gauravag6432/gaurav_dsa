https://leetcode.com/problems/valid-anagram/description/

Given two strings s and t, return true if t is an anagram of s, and false otherwise.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, 
typically using all the original letters exactly once.

Example 1: 
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false

#Java Soln

# brute

class Solution {
    public boolean isAnagram(String s, String t) {
        HashMap<Character,Integer> map = new HashMap<>();
        HashMap<Character,Integer> map2 = new HashMap<>();
        for(char a: s.toCharArray()){
            if (map.containsKey(a)) {
            map.put(a,map.get(a)+1);
            }
            else map.put(a,1);
        }
        for(char b: t.toCharArray()){
            if (map2.containsKey(b)) {
            map2.put(b,map2.get(b)+1);
            }
            else map2.put(b,1);
        }
        return map.equals(map2);
    }
}

# App II:

class Solution {
    public boolean isAnagram(String s, String t) {
         
        if (s.length() != t.length()) return false;
        HashMap<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        for (char c : t.toCharArray()) {
            if (!map.containsKey(c)) return false;
            map.put(c, map.get(c) - 1);
            if (map.get(c) == 0) map.remove(c);
        }
        return map.isEmpty();
    }
}

# App III:

class Solution {
    public boolean isAnagram(String s, String t) {
         
       if (s.length() != t.length()) return false;
        char[] sArray = s.toCharArray();
        char[] tArray = t.toCharArray();
        Arrays.sort(sArray);
        Arrays.sort(tArray);
        return Arrays.equals(sArray, tArray);
    }
}
