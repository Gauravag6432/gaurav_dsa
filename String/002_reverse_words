https://leetcode.com/problems/reverse-words-in-a-string/

Given an input string s, reverse the order of the words.
A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
Return a string of the words in reverse order concatenated by a single space.
Note that s may contain leading or trailing spaces or multiple spaces between two words.
The returned string should only have a single space separating the words. Do not include any extra spaces.

Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:
Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Example 3:
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.


# Java Soln

#best soln--

class Solution {
    public String reverseWords(String s) {
        StringBuilder str = new StringBuilder();
        int n = s.length();
        int x = n;

        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == ' ') {
                // Add the word if it's not empty
                if (i + 1 < x) {
                    str.append(s.substring(i + 1, x)).append(" ");
                }
                x = i; // Update x to the index of the space
            }}
            
        // Add the last word (if any)
        str.append(s.substring(0, x));

        // Trim any trailing space and return
        return str.toString().trim();
    }}

# Brute

class Solution {
    public String reverseWords(String s) {
        s=s.trim();
        String[] arr = s.split(" ", 0);
        for(int i =0;i<arr.length;i++){
            System.out.print(arr[i]);
        }
        
        int n=arr.length;
        String ans="";
        int i=n-1;
        while(i>=0){
            if(!arr[i].equals("")){
                ans+=arr[i]+" ";
            }
            i--;
        }
        // return ans;
        return ans.substring(0,ans.length()-1);

    }
}

# Better

class Solution {
    public String reverseWords(String s) {
        s=s.trim();
        s+=" ";
        Stack<String> st = new Stack<String>();
        int i;
        String str = "";
        for (i = 0;i < s.length();i++)
        {
            
            if( i!=0 && s.charAt(i) == ' ' && s.charAt(i-1) == ' ') {
                continue;
            }
            else if (s.charAt(i) == ' ')
            {
                st.push(str);
                str = "";
            }
            else if(s.charAt(i) != ' ')
            {
                str += s.charAt(i);
            }
        }
        String ans = "";
        while (st.size() != 1)
        {   
            ans += st.peek() + " ";
            System.out.println(ans);
            st.pop();
        }
        ans += st.peek();
        System.out.println(ans);
        return ans;
    }
}

# Optimal

class Solution {
    public String reverseWords(String s) {
        int left = 0;
        s=s.trim();
        int right = s.length() - 1;

        String temp = "";
        String ans = "";

        //Iterate the string and keep on adding to form a word
        //If empty space is encountered then add the current word to the result
        while (left <= right)
        {
            char ch = s.charAt(left);
            if (ch != ' ')
            {
                temp += ch;
            }
            else if (left>0 && ch == ' ' && s.charAt(left-1)!=' ')
            {
                if (!ans.equals(""))
                {
                    ans = temp + " " + ans;
                }
                else
                {
                    ans = temp;
                }
                temp = "";
            }
            left++;
        }

        //If not empty string then add to the result(Last word is added)
        if (!temp.equals(""))
        {
            if (!ans.equals(""))
            {
                ans = temp + " " + ans;
            }
            else
            {
                ans = temp;
            }
        }

        return ans;

    }
}
