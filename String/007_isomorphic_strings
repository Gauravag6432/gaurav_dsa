https://leetcode.com/problems/isomorphic-strings/

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters.
No two characters may map to the same character, but a character may map to itself.

Example 1:
Input: s = "egg", t = "add"
Output: true

Example 2:
Input: s = "foo", t = "bar"
Output: false

Example 3:
Input: s = "paper", t = "title"
Output: true

# java soln

class Solution {
    public boolean isIsomorphic(String s, String t) {
        if (s.length() != t.length()) return false; // Lengths must match
        
        HashMap<Character, Character> mapST = new HashMap<>();
        HashMap<Character, Character> mapTS = new HashMap<>();
        
        for (int i = 0; i < s.length(); i++) {
            char charS = s.charAt(i);
            char charT = t.charAt(i);
            
            // Check mapping from s -> t
            if (mapST.containsKey(charS)) {
                if (mapST.get(charS) != charT) return false; // Inconsistent mapping
            } else {
                mapST.put(charS, charT);
            }
            
            // Check mapping from t -> s
            if (mapTS.containsKey(charT)) {
                if (mapTS.get(charT) != charS) return false; // Inconsistent mapping
            } else {
                mapTS.put(charT, charS);
        }}  
        return true; // All characters mapped consistently
    }
}
