Given the head of a linked list of integers, determine the middle node of the linked list.
However, if the linked list has an even number of nodes, return the second middle node.

Example 1:
Input: LL: 1  2  3  4  5           
Output: 3
Explanation: Node with value 3 is the middle node of this linked list.
                         
Example 2:
Input: LL: 1  2  3  4  5  6       
Output: 4
Explanation: the linked list has an even number of nodes hence we return the second middle node which is 4.

#soln 1 Brute (O(N+N/2))

class Solution {
    public ListNode middleNode(ListNode head) {
        int count =0;
        ListNode temp = head;
        while(temp != null){
            count++;
            temp=temp.next;
        }
        count = count/2;
        while(count != 0){
            head= head.next;
            count--;
        }
        return head;
    }
}

#Soln 2 Optimal ortoise and Hare Algorithm (O(N/2))

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow= head,fast = head;

        while(fast!= null && fast.next!= null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
