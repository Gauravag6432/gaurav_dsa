https://leetcode.com/problems/convert-bst-to-greater-tree/description/

Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key 
of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:-
1. The left subtree of a node contains only nodes with keys less than the node's key.
2. The right subtree of a node contains only nodes with keys greater than the node's key.
3. Both the left and right subtrees must also be binary search trees.

Check out the leetcode problem description for Examples


#Java Soln O(N) using recursion and reverse in-order (right -> root -> left)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    private int sum = 0;

    public TreeNode convertBST(TreeNode root) {
        reverseInOrder(root);
        return root;
    }
    
    public void reverseInOrder(TreeNode root){
    if(root==null) return;

    reverseInOrder(root.right);

    sum+= root.val;
    root.val = sum;

    reverseInOrder(root.left);
    }
}
