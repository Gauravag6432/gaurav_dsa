Given an array of N integers, write a program to return an element that occurs more than N/2 times 
in the given array. You may consider that such an element always exists in the array.

Problem link: https://leetcode.com/problems/majority-element/description/

Example
Input Format: N = 10, nums[] = {4,4,2,4,3,4,4,3,2,4}
Result : 4

#1 soln Brute

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        n=len(nums)
        for i in range (n):
            count=0
            for j in range(i,n):
                if nums[i]==nums[j]:
                    count+=1
            if count>n/2:
                return nums[i]

#2 soln Better (using counter/hashmap)

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        n=len(nums)
        counter = Counter(nums)
        for num, count in counter.items():
            if count > (n // 2):
                return num

#3 soln Optimal

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        n=len(nums)
        count=0
        ele=nums[0]
        for i in range(n):
            if ele==nums[i]:
                count+=1
            else:
                count-=1    
            if count==0:
                ele=nums[i+1]
        return ele

#4 Java Optimal
