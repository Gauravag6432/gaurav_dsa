Given an array of N integers, write a program to return an element that occurs more than N/2 times 
in the given array. You may consider that such an element always exists in the array.

Problem link: https://leetcode.com/problems/majority-element/description/

Example
Input Format: N = 10, nums[] = {4,4,2,4,3,4,4,3,2,4}
Result : 4

#1 soln Brute

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        n=len(nums)
        for i in range (n):
            count=0
            for j in range(i,n):
                if nums[i]==nums[j]:
                    count+=1
            if count>n/2:
                return nums[i]

#2 soln Better (using counter/hashmap)

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        n=len(nums)
        counter = Counter(nums)
        for num, count in counter.items():
            if count > (n // 2):
                return num

#3 soln Optimal

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        n=len(nums)
        count=0
        ele=nums[0]
        for i in range(n):
            if ele==nums[i]:
                count+=1
            else:
                count-=1    
            if count==0:
                ele=nums[i+1]
        return ele

#4 Java Optimal

class Solution {
    public int majorityElement(int[] v) {
       int n = v.length;
        int cnt = 0; // count
        int el = 0; // Element

        //applying the algorithm:
        for (int i = 0; i < n; i++) {
            if (cnt == 0) {
                cnt = 1;
                el = v[i];
            } else if (el == v[i]) cnt++;
            else cnt--;
        }

        //checking if the stored element
        // is the majority element:
        int cnt1 = 0;
        for (int i = 0; i < n; i++) {
            if (v[i] == el) cnt1++;
        }

        if (cnt1 > (n / 2)) return el;
        return -1; 
    }
}
