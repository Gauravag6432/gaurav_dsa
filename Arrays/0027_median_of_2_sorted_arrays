Problem: https://leetcode.com/problems/median-of-two-sorted-arrays/
Article: https://takeuforward.org/data-structure/median-of-two-sorted-arrays-of-different-sizes/


Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.


#1 soln (brute)

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums3=[]
        m=len(nums1)
        n=len(nums2)
        i,j=0,0
        while(i<m and j<n):
            if nums1[i] <= nums2[j]:
                nums3.append(nums1[i])
                i+=1
            else:
                nums3.append(nums2[j])
                j+=1
        while(i<m):
            nums3.append(nums1[i])
            i+=1
        while(j<n):
            nums3.append(nums2[j])
            j+=1
        
        p= len(nums3)  
        if p % 2 == 0:
            return((nums3[p//2]+nums3[(p//2)-1])/2.0)
        else:
            return(nums3[(p)//2])

#2 soln (better)

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums3=[]
        m=len(nums1)
        n=len(nums2)
        i,j=0,0
        cnt=0
        ind1=(n+m)//2
        ind2=(n+m)//2-1
        ind1ele=-1
        ind2ele=-1
        while(i<m and j<n):
                
            if nums1[i] <= nums2[j]:
                if cnt==ind1:
                    ind1ele=nums1[i]
                if cnt==ind2:
                    ind2ele=nums1[i]
                cnt+=1
                i+=1
            else:
                if cnt==ind1:
                    ind1ele=nums2[j]
                if cnt==ind2:
                    ind2ele=nums2[j]
                cnt+=1
                j+=1
        while(i<m):
            if cnt==ind1:
                    ind1ele=nums1[i]
            if cnt==ind2:
                    ind2ele=nums1[i]
            cnt+=1
            i+=1
        while(j<n):
            if cnt==ind1:
                    ind1ele=nums2[j]
            if cnt==ind2:
                    ind2ele=nums2[j]
            cnt+=1
            j+=1
        if (n+m) % 2 == 0:
            return ((ind1ele+ind2ele)/2)
        else:
            return (ind1ele)

#3 optimal in JAVA

class Solution {
    public double findMedianSortedArrays(int[] a, int[] b) {
        int n1 = a.length, n2 = b.length;
        //if n1 is bigger swap the arrays:
        if (n1 > n2) return findMedianSortedArrays(b, a);

        int n = n1 + n2; //total length
        int left = (n1 + n2 + 1) / 2; //length of left half
        //apply binary search:
        int low = 0, high = n1;
        while (low <= high) {
            int mid1 = (low + high) / 2;
            int mid2 = left - mid1;
            //calculate l1, l2, r1 and r2;
            int l1 = (mid1 > 0) ? a[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? b[mid2 - 1] : Integer.MIN_VALUE;
            int r1 = (mid1 < n1) ? a[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? b[mid2] : Integer.MAX_VALUE;

            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 1) return Math.max(l1, l2);
                else return ((double) (Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;
            } else if (l1 > r2) high = mid1 - 1;
            else low = mid1 + 1;
        }
        return 0; //dummy statement
    }
}
