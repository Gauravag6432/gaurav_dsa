Given a non-empty array of integers nums, 
every element appears twice except for one. Find that single one.

Prob Link: https://leetcode.com/problems/single-number/description/

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1

#my soln
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        nums.sort()
        n=len(nums)
        if n==1:
            return nums[0]
        else:
            for i in range (0,n-2,2):
                if nums[i]!= nums[i+1]:
                    return nums[i]
        return nums[n-1]

#soln 1 Brute force
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        n=len(nums)
        for i in range(n):
            num= nums[i]
            count=0
            for j in range(n):
                if num == nums[j]:
                    count+=1
            if count == 1:
                return num
        return -1

#soln 2 Better (Array hashing)
 n = len(arr)
maxi = max(arr)
hash = [0] * (maxi + 1)
for num in arr:
    hash[num] += 1
for num in arr:
    if hash[num] == 1:
        return num

#soln 3 Better (Hashing using map data structure)
n = len(arr)
hashmap = {}
for num in arr:
    hashmap[num] = hashmap.get(num, 0) + 1
for num, count in hashmap.items():
    if count == 1:
        return num
return -1

#soln 4 Best (Using XOR)
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        xorr = 0
        for num in nums:
            xorr ^= num
        return xorr
