Problem Statement: Given an array of size n, write a program to check if the given array is sorted in 
(ascending / Increasing / Non-decreasing) order or not. If the array is sorted then return True, Else return False.
Note: Two consecutive equal values are considered to be sorted.

https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/

Example 1:
Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].

Example 2:
Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.

*JAVA
#soln 1

class Solution {
    public boolean check(int[] nums) {
        int n = nums.length;
        int countRotations = 0;
        
        for (int i = 0; i < n; i++) {
            // Compare current element with the next element (circularly)
            if (nums[i] > nums[(i + 1) % n]) {
                countRotations++;
            }
        }
        // Check if the array is rotated sorted
        return countRotations <= 1;
    }
}

#2 reverse iteration/indexing

class Solution {
    public boolean check(int[] nums) {
        int n = nums.length;
        int c = 0;

        // Iterate backwards through the array
        for (int i = n - 1; i >= 0; i--) {
            // Compare the current element with the previous element in a circular manner
            if (nums[i] < nums[(i - 1 + n) % n]) {
                c++;
            }
        }
        // Return true if the number of violations is less than or equal to 1
        return c <= 1;
    }
}

* Python

class Solution:
    def check(self, nums: List[int]) -> bool:
        n=len(nums)
        count_rotations = 0
        for i in range(n):
            if nums[i] > nums[(i + 1) %n ]:
                count_rotations += 1
        # Check if the array is rotated sorted
        return count_rotations <= 1
