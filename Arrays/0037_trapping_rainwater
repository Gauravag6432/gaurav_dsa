Given n non-negative integers representing an elevation map 
where the width of each bar is 1, compute how much water it can trap after raining.

https://leetcode.com/problems/trapping-rain-water/description/

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
In this case, 6 units of rain water (blue section) are being trapped.


*JAVA
#1 soln (Using left max and right max approach)

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        if (n == 0) return 0;

        int[] left = new int[n];
        int[] right = new int[n];

        // Initialize the left and right arrays
        left[0] = height[0];
        right[n - 1] = height[n - 1];

        // Fill the left array
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], height[i]);
        }

        // Fill the right array
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.max(right[i + 1], height[i]);
        }

        // Calculate the total trapped water
        int water = 0;
        for (int i = 0; i < n; i++) {
            water += Math.min(left[i], right[i]) - height[i];
        }

        return water;
    }
}
#2 soln (Using monotonic stack)

class Solution {
    public int trap(int[] height) {
        Stack<Integer> stack = new Stack<>();
        int n = height.length;
        int ans = 0;

        // Loop through each bar
        for (int i = 0; i < n; i++) {
            // Remove bars from the stack while the condition holds
            while (!stack.isEmpty() && height[stack.peek()] < height[i]) {
                // Store the height of the top and pop it
                int popHeight = height[stack.pop()];

                // If the stack is empty, break
                if (stack.isEmpty()) {
                    break;
                }

                // Get the distance between the left and right boundary of the popped bar
                int distance = i - stack.peek() - 1;

                // Calculate the minimum height
                int minHeight = Math.min(height[stack.peek()], height[i]) - popHeight;

                // Calculate the water trapped
                ans += distance * minHeight;
            }

            // If the stack is empty or height of the current bar is less than or equal to the top bar of stack
            stack.push(i);
        }

        return ans;
    }
}
