Given a matrix m X n, count paths from left-top to 
the right bottom of a matrix with the constraints that from each cell 
you can either only move to the rightward direction or the downward direction.

Link: https://leetcode.com/problems/unique-paths/description/

Example: 
Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

#1 soln brute (recursive approach)

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        def countPaths(i, j, n, m):
            if i == (n - 1) and j == (m - 1):
                return 1
            if i >= n or j >= m:
                return 0
            else:
                return countPaths(i + 1, j, n, m) + countPaths(i, j + 1, n, m)
        return countPaths(0, 0, m, n)

#2 soln (mathamatical approach)

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        N = n + m - 2
        r = m - 1
        res = 1
        for i in range(1, r + 1):
            res = res * (N - r + i) / i
        return int(res)
