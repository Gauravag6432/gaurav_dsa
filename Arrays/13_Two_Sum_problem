Given an array of integers nums and an integer target, 
return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Problem link:https://leetcode.com/problems/two-sum/

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

#my soln

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        n=len(nums)
        for i in range(n):
            num1=nums[i]
            for j in range(i+1,n):
                if nums[i]+nums[j]==target:
                    return i , j
                    break

#soln 2 (using hash map)

class Solution(object):
    def twoSum(self, nums, target):
        n=len(nums)
        mpp = {}
        for i in range(n):
            num = nums[i]
            more_needed = target - num
            if more_needed in mpp:
                return [mpp[more_needed], i]
            mpp[num] = i
        return [-1, -1]

#soln 3 (using 2 pointer, but doesn't return indexes)

def two_sum(n, arr, target):
    arr.sort()
    left, right = 0, n - 1
    while left < right:
        sum = arr[left] + arr[right]
        if sum == target:
            return "YES"
        elif sum < target:
            left += 1
        else:
            right -= 1
    return "NO"

# Example usage
n = 5
arr = [1, 2, 4, 3, 6]
target = 7
print(two_sum(n, arr, target))  # Output: "YES"
