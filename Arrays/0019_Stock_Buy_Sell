You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and 
choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If not return 0.

https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.


#1 my soln [Java]
class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int profit=0;
        for (int i = 0; i <n-1; i++) {
            for (int j = i + 1 ; j < n; j++) {
                if (prices[j]-prices[i] > profit){
                    profit = prices[j]-prices[i];
                }     
            }   
        }
        return profit;
    }
}

#2 my soln [Python]
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n=len(prices)
        profit=0
        for i in range(n-1):
            for j in range(i+1,n):
                if (prices[j]-prices[i]) > profit:
                    profit = (prices[j]-prices[i]) # or use -> profit = max(prices[j]-prices[i],profit)
        return profit


#3 optimum soln [Python]
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n=len(prices)
        profit=0
        minPrice = float('inf')
        for i in range(n):
            minPrice = min(minPrice, prices[i])
            profit = max(prices[i]-minPrice,profit)
        return profit
