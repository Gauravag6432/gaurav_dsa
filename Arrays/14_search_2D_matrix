ou have been given a 2-D array 'mat' of size 'N x M' where 
'N' and 'M' denote the number of rows and columns, respectively. 
You are given an integer ‘target’, and your task is to find if it exists in the given 'mat' or not.

link: https://leetcode.com/problems/search-a-2d-matrix/description/

Example 1:
Input Format:
 N = 3, M = 4, target = 8,
mat[] = 
1 2 3 4
5 6 7 8 
9 10 11 12

Result: true

#soln 1 (brute)

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        n = len(matrix)
        m = len(matrix[0])

        for i in range(n):
            for j in range(m):
                if matrix[i][j] == target:
                    return True
        return False

#soln 2 (binary search)

def binarySearch(nums, target):
    n = len(nums) # size of the array
    low, high = 0, n - 1

    # Perform the steps:
    while low <= high:
        mid = (low + high) // 2
        if nums[mid] == target:
            return True
        elif target > nums[mid]:
            low = mid + 1
        else:
            high = mid - 1
    return False

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
            n = len(matrix)
            m = len(matrix[0])

            for i in range(n):
                if matrix[i][0] <= target <= matrix[i][m - 1]:
                    return binarySearch(matrix[i], target)
            return False
#soln 3 (optimal)

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        n = len(matrix)
        m = len(matrix[0])

        # apply binary search:
        low = 0
        high = n * m - 1
        while low <= high:
            mid = (low + high) // 2
            row = mid // m
            col = mid % m
            if matrix[row][col] == target:
                return True
            elif matrix[row][col] < target:
                low = mid + 1
            else:
                high = mid - 1
        return False         

