Given an integer array nums, find the contiguous subarray (containing at least one number)
with the largest sum, and return its sum.

https://leetcode.com/problems/maximum-subarray/

Example 1:
Input: arr = [-2,1,-3,4,-1,2,1,-5,4] 
Output: 6 
Explanation:  [4,-1,2,1] has the largest sum = 6. 

#1 Soln brute

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxsum=-sys.maxsize - 1
        n=len(nums)
        for i in range(n):
            for j in range(i,n):
                sum=0
                for k in range(i,j+1):
                    sum+=nums[k]
                    maxsum= max(sum,maxsum)
        return maxsum

#2 soln Better

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxsum=-sys.maxsize - 1
        n=len(nums)
        for i in range(n):
            sum=0
            for j in range(i,n):
                sum+=nums[j]
                maxsum= max(sum,maxsum)
        return maxsum

#3 soln Optimal

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxsum=-sys.maxsize - 1
        n=len(nums)
        sum=0
        for i in range(n):
            sum+=nums[i]
            if sum > maxsum:
                maxsum = sum
            if sum<0:
                sum=0
        return maxsum

#4 follow up question--> printing subaray with max sum

def maxSubarraySum(arr, n):
    maxi = -sys.maxsize - 1  # maximum sum
    sum = 0

    start = 0
    ansStart, ansEnd = -1, -1
    for i in range(n):

        if sum == 0:
            start = i  # starting index

        sum += arr[i]

        if sum > maxi:
            maxi = sum

            ansStart = start
            ansEnd = i

        # If sum < 0: discard the sum calculated
        if sum < 0:
            sum = 0

    # printing the subarray:
    print("The subarray is: [", end="")
    for i in range(ansStart, ansEnd + 1):
        print(arr[i], end=" ")
    print("]")
