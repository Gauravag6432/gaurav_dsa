Given an array consisting of only 0s, 1s, and 2s.
Write a program to in-place sort the array without using inbuilt sort functions.
Expected: Single pass-O(N) and constant space

problem: https://leetcode.com/problems/sort-colors/

Examples
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Input: nums = [2,0,1]
Output: [0,1,2]


#1 my soln (brute)
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        count1,count0=0,0
        for i in range (len(nums)):
            if nums[i]==0:
                count0+=1
            elif nums[i]==1:
                count1+=1
        for i in range (count0):
            nums[i]=0
        for i in range (count0,count0+count1):
            nums[i]=1
        for i in range (count0+count1, len(nums)):
            nums[i]=2

#2 optimal (3 pointer)

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        low,mid,high=0,0,len(nums)-1
        while mid <= high:
            if nums[mid]==0:
                nums[low], nums[mid] =nums[mid], nums[low]
                mid+=1
                low+=1
            elif nums[mid]==1:
                mid+=1
            else:
                nums[high], nums[mid] = nums[mid], nums[high]
                high-=1
