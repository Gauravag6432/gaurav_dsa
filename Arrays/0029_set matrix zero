Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

https://leetcode.com/problems/set-matrix-zeroes/

Example--
Input: matrix=[[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
Explanation:  Since matrix[0][0]=0 and matrix[0][3]=0. Therefore 1st row, 1st column and 4th column will be set to 0

#1 soln (brute) works only if matrix doesn't contain negative int

class Solution {
    public void setZeroes(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        int row1= 0;
        int col1=0;
        for (int i=0;i < row; i++){
            for (int j=0;j< col; j++){
                if (matrix[i][j]==0){
                    row1=i;
                    col1=j;
                    for (int k =0;k<row;k++){
                        if(matrix[k][col1]!=0){
                            matrix[k][col1]=-11;
                        }
                    }
                    for (int l =0;l<col;l++){
                        if(matrix[row1][l]!=0){
                            matrix[row1][l]=-11;
}}}}}
        for (int m=0;m < row; m++){
            for (int n=0;n< col; n++){
                if (matrix[m][n]==-11){
                    matrix[m][n]=0;
}}}}}

#2 soln Better

class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int[] row = new int[n]; // row array
        int[] col = new int[m]; // col array

        // Traverse the matrix:
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == 0) {
                    // mark ith index of row wih 1:
                    row[i] = 1;

                    // mark jth index of col wih 1:
                    col[j] = 1;
                }
            }
        }

        // Finally, mark all (i, j) as 0
        // if row[i] or col[j] is marked with 1.
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (row[i] == 1 || col[j] == 1) {
                    matrix[i][j]=0;
                }
            }
        }
    }
}

#3 soln Optimal

class Solution {
    public void setZeroes(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;

        int col0 = 1;
        // Step 1: Traverse the matrix and mark the 1st row & col accordingly:
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) {
                    // Mark i-th row:
                    matrix[i][0] = 0;

                    // Mark j-th column:
                    if (j != 0)
                        matrix[0][j] = 0;
                    else
                        col0 = 0;
                }
            }
        }
        // Step 2: Mark with 0 from (1,1) to (n-1, m-1):
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] != 0) {
                    // Check for col & row:
                    if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                        matrix[i][j] = 0;
                    }
                }
            }
        }

        // Step 3: Finally mark the 1st col & then 1st row:
        if (matrix[0][0] == 0) {
            for (int j = 0; j < n; j++) {
                matrix[0][j] = 0;
            }
        }
        if (col0 == 0) {
            for (int i = 0; i < m; i++) {
                matrix[i][0] = 0;
            }
        }
    }
}
