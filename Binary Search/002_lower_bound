https://www.naukri.com/code360/problems/lower-bound_8165382

You are given an array 'arr' sorted in non-decreasing order and
a number 'x'. You must return the index of the lower bound of 'x'.
1. For a sorted array 'arr', 'lower_bound' of a number 'x' is defined
as the smallest index 'idx' such that the value 'arr[idx]' is not less than 'x'.
If all numbers are smaller than 'x', then 'n' should be the 'lower_bound' of 'x', where 'n' is the size of array.

Example: Input: ‘arr’ = [1, 2, 2, 3] and 'x' = 0
Output: 0
Explanation: Index '0' is the smallest index such that 'arr[0]' is not less than 'x'.

#Java Soln

#1 O(n) soln--
public static int lowerBound(int []arr, int n, int x) {
        for (int i = 0; i < n; i++) {
            if (arr[i] >= x) {
                // lower bound found:
                return i;
            }
        }
        return n;
    }

#2 Binary Search algorithm O(log(n))
public class Solution {
    public static int lowerBound(int []arr, int n, int x) {
        int low=0, high=n-1, ans=n;
        while(low<=high){
            int mid=(low+high)/2;
            if(arr[mid]<x){
                low=mid+1;
            }
            else{
                ans=mid;
                high=mid-1;
            }
        }
        return ans;   
    }}
