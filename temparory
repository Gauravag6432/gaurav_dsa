3.

DP I

public class Solution {
    
    public int minimumEnergy(int[] height, int n) {
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = -1;
        }

        return f(n - 1, height, dp);
    }

    private int f(int n, int[] height, int[] dp) {
        if (n == 0) {
            dp[0] = 0;
            return dp[0];
        }
        if (n == 1) {
            dp[1] = Math.abs(height[1] - height[0]);
            return dp[1];
        }
        if (dp[n] != -1) {
            return dp[n];
        }

        int jumpOne = f(n - 1, height, dp) + Math.abs(height[n] - height[n - 1]);
        int jumpTwo = f(n - 2, height, dp) + Math.abs(height[n] - height[n - 2]);
        dp[n] = Math.min(jumpOne, jumpTwo);
        return dp[n];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] height = {10, 30, 40, 20}; // Example height array
        int n = height.length;
        System.out.println(solution.minimumEnergy(height, n)); // Example usage
    }
}

DP II

public class Solution {

    public int minimumEnergy(int[] height, int n) {
        if (n <= 1) {
            return 0;
        }

        int[] dp = new int[n];
        dp[0] = 0;
        dp[1] = Math.abs(height[1] - height[0]);

        for (int i = 2; i < n; i++) {
            int jumpOne = dp[i - 1] + Math.abs(height[i] - height[i - 1]);
            int jumpTwo = dp[i - 2] + Math.abs(height[i] - height[i - 2]);
            dp[i] = Math.min(jumpOne, jumpTwo);
        }

        return dp[n - 1];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] height = {10, 30, 40, 20}; // Example height array
        int n = height.length;
        System.out.println(solution.minimumEnergy(height, n)); // Example usage
    }
}

DP III

public class Solution {
    public int minimumEnergy(int[] height, int n) {
        if (n <= 1) {
            return 0;
        }

        int[] dp = new int[n];
        dp[0] = 0;
        dp[1] = Math.abs(height[1] - height[0]);

        for (int i = 2; i < n; i++) {
            int l = dp[i - 1] + Math.abs(height[i] - height[i - 1]);
            int r = dp[i - 2] + Math.abs(height[i] - height[i - 2]);
            dp[i] = Math.min(l, r);
        }

        return dp[n - 1];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] height = {10, 30, 40, 20}; // Example height array
        int n = height.length;
        System.out.println(solution.minimumEnergy(height, n)); // Example usage
    }
}
