DP on square

I

import java.util.Stack;

public class Solution {

    public int maximalRectangle(char[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int m = matrix.length;
        int n = matrix[0].length;

        // Initialize heights array
        int[] heights = new int[n];
        int maxArea = 0;

        for (int i = 0; i < m; i++) {
            // Update the heights array for the current row
            for (int j = 0; j < n; j++) {
                heights[j] = matrix[i][j] == '1' ? heights[j] + 1 : 0;
            }

            // Compute the maximum rectangle area with the updated heights
            maxArea = Math.max(maxArea, largestRectangleArea(heights));
        }

        return maxArea;
    }

    private int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> st = new Stack<>();
        int maxArea = 0;

        for (int i = 0; i <= n; i++) {
            while (!st.isEmpty() && (i == n || heights[i] < heights[st.peek()])) {
                int h = heights[st.pop()];
                int width = st.isEmpty() ? i : i - st.peek() - 1;
                maxArea = Math.max(maxArea, h * width);
            }
            st.push(i);
        }

        return maxArea;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        char[][] matrix = {
            {'1', '0', '1', '0', '0'},
            {'1', '0', '1', '1', '1'},
            {'1', '1', '1', '1', '1'},
            {'1', '0', '0', '1', '0'}
        };
        int result = solution.maximalRectangle(matrix);
        System.out.println(result); // Output: 6
    }
}

II

public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int n = matrix.length; // number of rows
        int m = matrix[0].length; // number of columns
        int[] heights = new int[m];
        int max_i = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == '1') {
                    heights[j]++;
                } else {
                    heights[j] = 0;
                }
            }

            int area_i = largestRectangleArea(heights);
            max_i = Math.max(max_i, area_i);
        }

        return max_i;
    }

    private int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> st = new Stack<>();
        int max_i = 0;

        for (int i = 0; i <= n; i++) {
            while (!st.isEmpty() && (i == n || heights[i] < heights[st.peek()])) {
                int h = heights[st.pop()];
                int width = st.isEmpty() ? i : i - st.peek() - 1;
                max_i = Math.max(max_i, h * width);
            }
            st.push(i);
        }

        return max_i;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        char[][] matrix = {
            {'1', '0', '1', '0', '0'},
            {'1', '0', '1', '1', '1'},
            {'1', '1', '1', '1', '1'},
            {'1', '0', '0', '1', '0'}
        };
        int result = solution.maximalRectangle(matrix);
        System.out.println(result); // Output: 6
    }
}

2. conunt square 

import java.util.*;

public class Solution {
    public int countSquares(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];

        // Copy the first row
        for (int i = 0; i < n; i++) {
            dp[0][i] = matrix[0][i];
        }
        
        // Copy the first column
        for (int i = 1; i < m; i++) {
            dp[i][0] = matrix[i][0];
        }

        // Fill the rest of dp table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] == 1) {
                    dp[i][j] = Math.min(dp[i][j-1], Math.min(dp[i-1][j-1], dp[i-1][j])) + matrix[i][j];
                }
            }
        }

        // Calculate the total number of squares
        int s = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                s += dp[i][j];
            }
        }

        return s;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] matrix = {
            {1, 0, 1},
            {1, 1, 0},
            {1, 1, 0}
        };
        int result = solution.countSquares(matrix);
        System.out.println(result); // Output: 7
    }
}
