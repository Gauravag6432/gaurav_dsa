4.

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
         int m = triangle.size();
        
        // Create a 2D dp array to store the minimum path sums
        int[][] dp = new int[m][m];
        
        // Initialize the dp array with the values from the triangle
        for (int i = 0; i < m; i++) {
            List<Integer> row = triangle.get(i);
            for (int j = 0; j <= i; j++) {
                dp[i][j] = row.get(j);
            }
        }

        // Build the dp array from bottom to top
        for (int i = m - 2; i >= 0; i--) {
            List<Integer> row = triangle.get(i);
            for (int j = 0; j <= i; j++) {
                dp[i][j] += Math.min(dp[i + 1][j], dp[i + 1][j + 1]);
            }
        }

        // Return the minimum path sum from the top of the triangle
        return dp[0][0];
    }
}


5.

int n = matrix.length;
        int[][] dp = new int[n][n];

        // Initialize the dp array with the first row of the matrix
        for (int i = 0; i < n; i++) {
            dp[0][i] = matrix[0][i];
        }

        // Fill the dp array from the second row to the last row
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int left = Integer.MAX_VALUE;
                int right = Integer.MAX_VALUE;

                // Check the cell to the left
                if (j - 1 >= 0) {
                    left = dp[i - 1][j - 1];
                }

                // Check the cell to the right
                if (j + 1 < n) {
                    right = dp[i - 1][j + 1];
                }

                // Update the dp value for the current cell
                dp[i][j] = Math.min(left, Math.min(dp[i - 1][j], right)) + matrix[i][j];
            }
        }

        // Find the minimum value in the last row of the dp array
        int minPathSum = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            minPathSum = Math.min(minPathSum, dp[n - 1][i]);
        }

        return minPathSum;
