5.

RECURSION

import java.util.HashMap;
import java.util.Map;

public class Solution {

    private Map<Integer, Integer> memo = new HashMap<>();

    public int rob(int[] nums) {
        return f(nums.length - 1, nums);
    }

    private int f(int n, int[] nums) {
        if (n == 0) {
            return nums[0];
        }
        if (n == 1) {
            return Math.max(nums[0], nums[1]);
        }
        if (memo.containsKey(n)) {
            return memo.get(n);
        }

        int l = f(n - 1, nums); // not pick current house
        int r = f(n - 2, nums) + nums[n]; // pick current house
        int result = Math.max(l, r);
        memo.put(n, result);

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {2, 3, 2}; // Example input
        System.out.println(solution.rob(nums)); // Example usage
    }
}


DP I

public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int[] dp = new int[n];

        // Base cases
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            // Choose the maximum between not robbing the current house or robbing it
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
        }

        return dp[n - 1];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {2, 3, 2}; // Example input
        System.out.println(solution.rob(nums)); // Example usage
    }
}

DP II

public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int[] dp = new int[n];
        
        // Base cases
        dp[0] = nums[0];
        if (n > 1) {
            dp[1] = Math.max(nums[0], nums[1]);
        }

        for (int i = 2; i < n; i++) {
            // Not pick the current house or pick it
            int notPick = dp[i - 1];
            int pick = dp[i - 2] + nums[i];
            dp[i] = Math.max(notPick, pick);
        }

        return dp[n - 1];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {2, 3, 2}; // Example input
        System.out.println(solution.rob(nums)); // Example usage
    }
}

DP III

public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;

        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int l = nums[0];
        int r = Math.max(nums[0], nums[1]);
        int finalAmount = r;

        for (int i = 2; i < n; i++) {
            int temp = r;             // Not picking current house
            r = l + nums[i];          // Picking current house
            finalAmount = Math.max(temp, r);
            l = temp;
        }

        return finalAmount;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {2, 3, 2}; // Example input
        System.out.println(solution.rob(nums)); // Example usage
    }
}

6.

import java.util.Arrays;

public class Solution {

    public int rob(int[] numsArr) {
        if (numsArr.length == 0) {
            return 0;
        }
        if (numsArr.length == 1) {
            return numsArr[0];
        }
        if (numsArr.length == 2) {
            return Math.max(numsArr[0], numsArr[1]);
        }

        int[] nums1 = Arrays.copyOfRange(numsArr, 0, numsArr.length - 1);
        int[] nums2 = Arrays.copyOfRange(numsArr, 1, numsArr.length);

        return Math.max(f(nums1), f(nums2));
    }

    private int f(int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return nums[0];
        }

        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            int l = dp[i - 1]; // not pick i
            int r = dp[i - 2] + nums[i]; // pick i
            dp[i] = Math.max(l, r);
        }

        return dp[n - 1];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] numsArr = {2, 3, 2}; // Example input
        System.out.println(solution.rob(numsArr)); // Example usage
    }
}
