
DP I:

public class Solution {
    
    private boolean subsetSumUtil(int ind, int target, int[] arr, int[][] dp) {
        if (target == 0) {
            return true;
        }
        
        if (ind == 0) {
            return arr[0] == target;
        }
        
        if (dp[ind][target] != -1) {
            return dp[ind][target] == 1;
        }
        
        boolean notTaken = subsetSumUtil(ind - 1, target, arr, dp);
        boolean taken = false;
        if (arr[ind] <= target) {
            taken = subsetSumUtil(ind - 1, target - arr[ind], arr, dp);
        }
        
        dp[ind][target] = (notTaken || taken) ? 1 : 0;
        return dp[ind][target] == 1;
    }
    
    public int minSubsetSumDifference(int[] arr) {
        int n = arr.length;
        int totSum = 0;
        for (int num : arr) {
            totSum += num;
        }
        
        int[][] dp = new int[n][totSum + 1];
        for (int[] row : dp) {
            java.util.Arrays.fill(row, -1);
        }
        
        for (int i = 0; i <= totSum; i++) {
            subsetSumUtil(n - 1, i, arr, dp);
        }
        
        int mini = Integer.MAX_VALUE;
        
        for (int i = 0; i <= totSum; i++) {
            if (dp[n - 1][i] == 1) {
                int diff = Math.abs(i - (totSum - i));
                mini = Math.min(mini, diff);
            }
        }
        
        return mini;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] arr = {1, 6, 11, 5};
        int result = solution.minSubsetSumDifference(arr);
        System.out.println(result); // Output will be the minimum subset sum difference
    }
}


dp II

public class Solution {
    
    public int minSubsetSumDifference(int[] arr) {
        int n = arr.length;
        int totSum = 0;
        for (int num : arr) {
            totSum += num;
        }

        boolean[][] dp = new boolean[n][totSum + 1];
        
        // Base cases
        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }

        if (arr[0] <= totSum) {
            dp[0][arr[0]] = true;
        }

        // Fill the DP table
        for (int ind = 1; ind < n; ind++) {
            for (int target = 1; target <= totSum; target++) {
                boolean notTaken = dp[ind - 1][target];
                boolean taken = false;
                if (arr[ind] <= target) {
                    taken = dp[ind - 1][target - arr[ind]];
                }
                dp[ind][target] = notTaken || taken;
            }
        }

        int mini = Integer.MAX_VALUE;
        
        for (int i = 0; i <= totSum; i++) {
            if (dp[n - 1][i]) {
                int diff = Math.abs(i - (totSum - i));
                mini = Math.min(mini, diff);
            }
        }

        return mini;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] arr = {1, 6, 11, 5};
        int result = solution.minSubsetSumDifference(arr);
        System.out.println(result); // Output will be the minimum subset sum difference
    }
}
