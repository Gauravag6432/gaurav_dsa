DP II:
public class Solution {
    public boolean canPartition(int[] arr) {
        int n = arr.length;
        int totSum = 0;
        for (int num : arr) {
            totSum += num;
        }
        
        // If the total sum is odd, it cannot be partitioned into two equal subsets.
        if (totSum % 2 == 1) {
            return false;
        }
        
        int k = totSum / 2;
        boolean[][] dp = new boolean[n][k + 1];

        // Initialize the first column as true
        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }

        // Initialize the first row
        if (arr[0] <= k) {
            dp[0][arr[0]] = true;
        }

        // Fill the dp table
        for (int ind = 1; ind < n; ind++) {
            for (int target = 1; target <= k; target++) {
                boolean notTaken = dp[ind - 1][target];
                boolean taken = false;
                if (arr[ind] <= target) {
                    taken = dp[ind - 1][target - arr[ind]];
                }
                dp[ind][target] = notTaken || taken;
            }
        }

        return dp[n - 1][k];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] arr = {1, 5, 11, 5};
        boolean result = solution.canPartition(arr);
        System.out.println(result); // Output will be true or false
    }
}

DP I:

public class Solution {

    private boolean f(int ind, int target, int[] arr, int[][] dp) {
        if (target == 0) {
            return true;
        }
        if (ind == 0) {
            return arr[0] == target;
        }
        
        if (dp[ind][target] != -1) {
            return dp[ind][target] == 1;
        }
        
        boolean notTaken = f(ind - 1, target, arr, dp);
        boolean taken = false;
        if (arr[ind] <= target) {
            taken = f(ind - 1, target - arr[ind], arr, dp);
        }
        
        dp[ind][target] = (notTaken || taken) ? 1 : 0;
        return dp[ind][target] == 1;
    }

    public boolean canPartition(int[] arr) {
        int n = arr.length;
        int totSum = 0;
        for (int num : arr) {
            totSum += num;
        }
        
        // if total sum is odd we can't partition into equal subset so return False
        if (totSum % 2 == 1) {
            return false;
        }
        
        int k = totSum / 2;
        int[][] dp = new int[n][k + 1];
        for (int[] row : dp) {
            java.util.Arrays.fill(row, -1);
        }
        
        // just find if subset sum equal to half of target exists or not
        return f(n - 1, k, arr, dp);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] arr = {1, 5, 11, 5};
        boolean result = solution.canPartition(arr);
        System.out.println(result); // Output will be true or false
    }
}
