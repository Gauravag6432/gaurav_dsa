DP II Approach I:

import java.util.Arrays;

public class Solution {
    private static final int MOD = 1000000007;

    public int countPartitions(int n, int d, int[] arr) {
        int totSum = Arrays.stream(arr).sum();

        if (totSum - d < 0 || (totSum - d) % 2 == 1) {
            return 0;
        }

        return findWays(arr, (totSum - d) / 2);
    }

    private int findWays(int[] num, int tar) {
        int n = num.length;
        int[][] dp = new int[n][tar + 1];

        if (num[0] == 0) {
            dp[0][0] = 2; // 2 cases - pick and not pick
        } else {
            dp[0][0] = 1; // 1 case - not pick
        }

        if (num[0] != 0 && num[0] <= tar) {
            dp[0][num[0]] = 1; // 1 case - pick
        }

        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= tar; target++) {
                int notTaken = dp[ind - 1][target];
                int taken = 0;
                if (num[ind] <= target) {
                    taken = dp[ind - 1][target - num[ind]];
                }

                dp[ind][target] = (notTaken + taken) % MOD;
            }
        }

        return dp[n - 1][tar];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] arr = {1, 2, 3, 4, 5};
        int n = arr.length;
        int d = 3;
        System.out.println(solution.countPartitions(n, d, arr)); // Example usage
    }
}

DP II Approach II:

